// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EventManager {
  id       Int      @unique @default(autoincrement())
  name     String
  email    String   @unique
  number   String   @unique
  password String
  events   Event[]
  role     UserRole @default(MANAGER)
}

model Vendor {
  id       Int      @unique @default(autoincrement())
  name     String
  email    String   @unique
  number   String   @unique
  password String
  tasks    Task[]
  role     UserRole @default(VENDOR)
}

model TeamMember {
  id       Int      @unique @default(autoincrement())
  name     String
  email    String   @unique
  number   String   @unique
  password String
  Event    Event?   @relation(fields: [eventId], references: [id])
  tasks    Task[]
  eventId  Int?
  role     UserRole @default(TEAM_MEMBER)
}

model Client {
  id       Int      @unique @default(autoincrement())
  name     String
  email    String   @unique
  number   String   @unique
  password String
  event    Event[]
  role     UserRole @default(CLIENT)
}

model Event {
  id          Int          @unique @default(autoincrement())
  name        String
  clientId    Int
  teamMembers TeamMember[]
  status      EventStatus  @default(CREATED)
  tasks       Task[]
  Client      Client       @relation(fields: [clientId], references: [id])
  managerId   Int
  manager     EventManager @relation(fields: [managerId], references: [id])
  messages    Messages[]
  createdOn   DateTime     @default(now())
  deadLine    DateTime
  updatedOn   DateTime     @updatedAt
}

model Task {
  id               Int              @unique @default(autoincrement())
  name             String
  eventId          Int
  event            Event            @relation(fields: [eventId], references: [id])
  vendorId         Int
  vendor           Vendor           @relation(fields: [vendorId], references: [id])
  teamMemberId     Int
  teamMember       TeamMember       @relation(fields: [teamMemberId], references: [id])
  status           TaskStatus
  subtasks         SubTask[]
  subTaskRequest   SubTaskRequest[]
  messages         Comments[]
  createdOn        DateTime         @default(now())
  deadLine         DateTime
  updatedOn        DateTime         @updatedAt
  approvedByVendor Boolean?         @default(false)
}

model SubTask {
  id            Int           @unique @default(autoincrement())
  name          String
  status        SubTaskStatus
  taskId        Int
  createdById   Int
  createdByRole UserRole
  task          Task          @relation(fields: [taskId], references: [id])
  createdOn     DateTime      @default(now())
  deadLine      DateTime
  updatedOn     DateTime      @updatedAt
}

model SubTaskRequest {
  id            Int           @id @default(autoincrement())
  name          String
  taskId        Int
  task          Task          @relation(fields: [taskId], references: [id])
  requestedById Int
  status        RequestStatus @default(PENDING)
  deadline      DateTime
  createdOn     DateTime      @default(now())
  reviewedOn    DateTime?
  isMajor       Boolean       @default(false)
}

model Comments {
  id         Int      @id @default(autoincrement())
  text       String
  createdAt  DateTime @default(now())
  senderId   Int
  senderRole UserRole
  taskId     Int
  task       Task     @relation(fields: [taskId], references: [id])
}

model Messages {
  id         Int      @id @default(autoincrement())
  text       String
  createdAt  DateTime @default(now())
  senderId   Int
  senderRole UserRole
  eventId    Int
  event      Event    @relation(fields: [eventId], references: [id])
}

model Chat {
  id         Int      @id @default(autoincrement())
  roomId     String
  senderId   Int
  message    String
  createdAt  DateTime @default(now())
}

enum EventStatus {
  CREATED
  COMPLETED
  UNDERPREPRATION
}

enum TaskStatus {
  CREATED
  ASSIGNED
  FINISHEDBYVENDOR
  UNDERREVIEWBYTEAMMEMBER
  REJECTEDBYTEAMMEMBER
  UNDERREVIEWBYCLIENT
  REJECTEDBYCLIENT
  COMPLETED
}

enum SubTaskStatus {
  CREATED
  FINISHEDBYVENDOR
  UNDERREVIEWBYTEAMMEMBER
  REJECTEDBYTEAMMEMBER
  UNDERREVIEWBYCLIENT
  REJECTEDBYCLIENT
  COMPLETED
}

enum UserRole {
  CLIENT
  TEAM_MEMBER
  MANAGER
  VENDOR
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
